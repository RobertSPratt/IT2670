#+TITLE: Introduction and Chapter 1: A Tutorial Introduction

* Introduction
- C is a general-purpose programming language closely associated with UNIX, where it was developed, because both the OS and most of its programs are written in C
- many of the important ideas of C stem from the BCPL language, developed by Martin Richards
  + BCPL's influence on C proceeded indirectly through B, written by Ken Thompson in 1970
  + BCPL and B are both "typeless" languages, while C has a variety of data types
- the fundamental types are /characters/, /integers/, and /floating-point/ numbers of several sizes
  + there is also a heirarchy of derived data types created with /pointers/, /arrays/, /structures/, and /unions/
- /expressions/ are formed from operators and operands
  + any expression can be a statement, including an assignment or function call
- /pointers/ provide for machine-independent address arithmetic
- C provides the fundamental control-flow constructions required for well-structured programs:
  + statement grouping
  + decision making (if-else)
  + selecting one of a set of possible cases (switch)
  + looping with the termination test at the top (while, for)
    - or at the bottom (do)
    - early loop exit (break)
- functions can return values of basic types, structures, unions, or pointers
  + any function can be called recursively
- local variables are typically /automatic/, meaning they are created anew with each invocation
- while function definitions cannot be nested, variables can be declared in a block-structured fashion
- C functions may exist in separate source files and compiled separately
- variables can be internal to a function, external but known only within a single source file, or visible to the entire program
- C is a relatively "low-level" language
  + this means that, while C deals with the same sort of objects that most computers do, they may be combined and moved about with the arithmetic and logical operators implemented by real machines
- C provides no operations to deal directly with composite objects
  + this includes character strings, sets, lists, or arrays
  + there are no operations operations that manipulate an entire array or string, but structures may be copied as a unit
- there is no heap or garbage collection, only the static definition and the stack discipline provided by the local variables of functions
- C provides no input/output facilites; there are no `read` or `write` statements or built-in file access methods
  + all of these higher-level mechanisms must be provided by explicitly-called functions but most C implementations have included a reasonably standard collection of them
- C offers only straghtforward, single-thread control flow:
  + tests
  + loops
  + grouping
  + subprograms
  + there is no multiprogramming, parallel operations, synchronization, or coroutines
- in 1988, ANSI released a new/modern, comprehensive definition of C
  + this was based on the original reference manual, /The C Programming Language/, and included features that were mostly already supported by modern compilers
  + while little changed, one of the goals of the standard was to make sure that most existing programs would remain valid or that compilers would produce warnings of new behaviour
  + for most programmers, the most important change was that of new syntax for declaring and defining functions
    - these can now include a description of the arguments of the function, making it easier for compilers to detect errors caused by mismatched arguments
  + a second significant contribution of the standard is the difinition of a library to accompany C
    - this specifies functions for accessing the OS (read/write), formatted input and output, memory allocation, string manipulation, etc.
    - most of the library is closely modeled on the "standard I/O library" of the UNIX system
  + the standard makes portability issues explicit and prescribes a set of constraints that characterize the machine on which it the program can run
* Chapter 1: A Tutorial Introduction
** Getting Started
- functions can have whatever names the programmer desires
  + the exception is `main`--the program begins executing at the beginning of `main`, and so a `main` function must be present
- the `#include <stdio.h>` line tells the compiler to include information about the standard I/O library and appears at the beginning of many C source files
- one method of communicating data between functions is for the calling function to provide a list of values, called /arguments/
  + a function is called by naming it, followed by a parenthesized list of arguments
- a /character string/, or /string constant/, is a sequence of characters in double quotes
- the C notation for a /newline character/ is `\n`
- an /escape sequence/ like `\n` provides a general and extensible mechanism for representin hard-to-type or invisible characters
** Variables and Arithmetic Expressions
- /comments/ briefly explain what the program or section of code does
  + any code between `/**/` is ignored by the compiler
- in C, all variables must be declared before they can be used
  + a /declaration/ annoucnes the properties of a variable
- the body of a `while` can be one or more statements enclosed in braces
  + although the compiler does not care about spacing and indention, indenting the nested statements will emphasize the structure of the program and proper indention makes programs easier for people to read
- C, like many other languages, /trencates/ integer division, cutting of any decimal values
- if an arithmetic operator has one floating-point operand and one integer operand, the interger will be converted to floating-point befor the operation is done
** The For Statement
- the `for` statement is a loop, a generalization of the `while`
  + like the while, the body of a `for` can be one or many statements inside of braces
  + its initialization, condition, and increment can be any expression
- the choice between `while` and `for` is arbitrary and based on which seems clearer
  + the `for` is usually appropriate for loops where the initialization and increment are single statements and logically related as it is more compact than the while and keeps the loop control statements together in one place
** Symbolic Constraints
- the `#define` line defines a /symbolic name/, or /symbolic constant/, to be a particular string of characters
  + usage: `#define` /name/ /replacement text/
    - any later occurance of /name/ not in quotes or part of another name will be replaced by /replacement text/ at runtime
    - the /replacement text/ can be any sequence of characters; it is not limited to numbers
  + there is no `;` at the end of a `#define` line
- symbolic constants names are conventionally written in upper case so they can be readily distinguished from lower case variable names
** Character Input and Output
- text input/output, regardless of where it originates or where it goes, is dealt with as streams of characters
- a /text stream/ is a sequence of characters divided into lines
  + each line consists of xero or more characters followed by a newline character
- `getchar` and `putchar` are the simplest functions for reading or writing one character at a time from the standard library
  + there are several others
*** File Copying
- `EOF` is defined as an `int` in `<stdio.h>`
*** Character Counting
- C has the shorthand `++` and `--` increment and decrement operators
- the grammatical rules of C requir that a `for` statement have a body
  + if all of the work is done in the test and increment parts, a null statement can be added (`;`)
*** Line Counting
- a character written between single quotes represents an integer value equal to the numerical value of the character in the machine's character set
  + this is called a /character constant/
*** Word Counting
